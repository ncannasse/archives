open Vfs
open Run

let symbols_t = Vfs.get_ftype "_SY"

type symbol = (string * fdep)

let symbols_sort l =
	List.sort (fun (name,_) (name',_) -> compare name name') l

let new_symbol pid =
	let d = Dialogs.create None "symbol.new" in
	let cfile = d#combobox "symbol.file" in
	cfile#listprint (fun() -> List.map name_of_file (get_all_files()));
	if d#process then begin
		let name = (d#edit "symbol.name")#get_caption in
		let msel = cfile#selected in
		Dialogs.close d;
		let mid = (match msel with
			| None -> failwith "You must select a File"
			| Some pos -> List.nth (get_all_files()) pos 
		) in
		match Vfs.get_group symbols_t with
		| [] -> failwith "No symbols !"
		| id::_ ->
			let symbols = read id in
			try
				ignore(List.find (fun (n,_) -> n = name) symbols);
				failwith ("Symbol "^name^" already exists");
			with
				Not_found -> 
					let fdep = add_dep id mid in			
					write id (symbols_sort ((name,fdep)::symbols));
	end else
		Dialogs.close d

let delete_symbol id name () =
	let symbols = List.filter (fun (n,dep) ->
		if n <> name then true else begin
			del_dep id dep;
			false;
		end
	) (read id) in
	write id symbols;
	try Document.close id; with _ -> ()

let generate_symbols id =
	let symbols = read id in
	let f = open_out "constfiles.ml" in
	output_string f "(* GENERATED BY SYMBOLS-plugin for Dragoon3 *)\n\n";
	output_string f "let safe_cast x = (Obj.magic x : Vfs.fid)\n\n";
	List.iter (fun (name,dep) -> output_string f (Printf.sprintf "let f%s = safe_cast (%d)\n" name (Obj.magic (Vfs.get_dep id dep)))) symbols;
	close_out f

let open_symbols id =
	let symbol_display id (name,fdep) =
		let fid = get_dep id fdep in
		Printf.sprintf "<panel border='no' align='top' height='20'><label align='left' caption='%s => %s' width='300'/><button name='del%s' caption='DELETE' align='left'/></panel>" name (name_of_file fid) name
	in
	let symbols = read id in
	let xdata = "<panel border='no' span='10' space='10'>"^(String.concat "" (List.map (symbol_display id) symbols))^
		"<button name='generate' align='center' caption='GENERATE'/></panel>" in
	Document.create id (Xml.parse_string xdata)
		(fun x ->
			(x#button "generate")#on_click (fun () -> generate_symbols id);
			List.iter (fun (name,dep) -> (x#button ("del"^name))#on_click (delete_symbol id name)) symbols
		)


let init_symbols() =
	match Vfs.get_group symbols_t with
	| _::_ -> ()
	| [] ->
		let id = Vfs.create_file "symbols" (get_root()) symbols_t in
		write id []

;;
Vfs.register {
	ft_name = "Symbol";
	ft_t = symbols_t;	
	ft_icon = Gfxres.bitmap "BMP_SYMBOLS";
	ft_new = Some new_symbol;
	ft_select = None;
	ft_unselect = None;
	ft_open = Some open_symbols;
	ft_show = None;
	ft_hide = None;
	ft_close = None;
	ft_context = [];
	ft_delete = None;
	ft_hardlinked = None;
	ft_haschilds = false;
	ft_export = None;
};

Run.register {
	m_name = "Symbols";
	m_init = Some init_symbols;
	m_main = None;
	m_close = None;
};